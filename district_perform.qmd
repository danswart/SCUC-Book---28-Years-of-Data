---
title: "Growth, Attendance, Attrition"
author: "Dan Swart, Trustee, Seat 6"
editor: 
  markdown: 
    wrap: 72
---

<br>
<br>
<br>

Let your eyes wander over these plots and get a sense of the growth and
development of the district over the last 28 years. Using just your eyes
you will gain an appreciation for the accomplishments and growth of the
district.

<br>
<br>
<br>

Enjoy!

<br>


<!-- CONSIDER PREPARING THEM AS PLOT_LY PLOTS TO SEE IF THAT WORKS BETTER! -->


```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=8, fig.height=7}

# # Load Libraries
# # 
# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# library(camcorder)
# library(RColorBrewer)
# 
# options(scipen = 999)
# 
# # Start recording
# # gg_record(
# #   dir = "recording",
# #   device = "pdf",
# #   width = 8,
# #   height = 7,
# #   units = "in",
# #   dpi = 300
# # )
# 
# 
# # # Define a custom label formatting function
# custom_label_func <- function(x) {
#   # For values greater than or equal to 1 million, format without exponential notation and with commas
#   if (any(abs(x[!is.na(x)]) >= 1e6)) {
#     # For other values, use the default formatting with commas
#     return(format(x, big.mark = ",", scientific = FALSE))
#   } else {
#     # For other values, use the default formatting with commas
#     return(format(x, big.mark = ","))
#   }
# }
# 
# 
# # # Load the data
# df2 <- read_csv(file = here::here("data",
#                                   "SCUC Snapshots 1995 to 2022-LONG.csv")
#                 )
# 
# 
# 
# # # Correct unit column for 1 category if you have old .csv file
# # 
# # df2 <- df2 %>%
# #   mutate(units = ifelse(sort == 13 & grouping == "Exit-Level Cumulative Pass Rate",
# #                         "rate",
# #                         units
# #                         )
# #          )
# # 
# # 
# # # Write the original data frame with updated data
# # write.csv(df2, file = here::here("data", "SCUC Snapshots 1995 to 2022-LONG.csv"), row.names = FALSE)
# 
# 
# 
# 
# first_df <- df2 %>%
#  filter(section == "District_Perform"
#         ) %>%
#   mutate(sort = as.numeric(sort)) %>%
#   arrange(sort)
# 
# # Specify the desired section
# desired_section <- "District_Perform"
# 
# # Specify desired grouping categories
# desired_groupings = unique(first_df$grouping)
# 
# # Specify desired units of measurement
# desired_units <- unique(first_df$units)
# 
# # Specify desired years
# desired_years <- unique(first_df$year)
# 
# # Specify desired grade level
# desired_grades <- unique(first_df$grade)
# 
# # Specify desired achievement level
# desired_levels <- unique(first_df$level_achieved)
# 
# # Specify desired sorting order
# desired_order <- unique(first_df$sort)
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# # Specify the svg folder name
# svg_folder <- paste0("svg_",
#                      desired_section)
# 
# # Replace zeros in the value column with NA
# first_df$value <- ifelse(first_df$value == 0,
#                          NA,
#                          first_df$value)
# 
# 
# # Group the data frame and sort by the desired sorting column
# first_df_grouped <- first_df %>%
#   group_by(sort, grouping, grade) %>%
#   group_split()
# 
# 
# # Define the function with arguments for desired parameters
# generate_run_chart <- function(df_group,
#                                desired_years,
#                                desired_grades) {
# 
# # Check if the group has more than one observation
# if (nrow(df_group) > 1) {
# 
# # Access the unique values for the variables
#   group_category <- unique(df_group$grouping)
#   group_grade <- unique(df_group$grade)
#   group_units <- unique(df_group$units)
#   group_level <- unique(df_group$level_achieved)
# 
# # Calculate the y-axis range based on the minimum and maximum values of the 'value' column
# y_min <- min(df_group$value,
#              na.rm = TRUE)
# y_max <- max(df_group$value,
#              na.rm = TRUE)
# y_range <- y_max - y_min
# 
# # Set the desired maximum range for the y-axis
# max_y_range <- y_range + .50  # You can adjust this value based on your preference
# 
# # Set the desired expansion factor
# expansion_factor <- ifelse(y_range < max_y_range,
#                            max_y_range - y_range,
#                            0)
# 
# # Calculate the y.expand value to set the y-axis limits dynamically
# y_expand <- y_max + expansion_factor
# 
# 
# # Create dynamic title and subtitle
# title <- paste0(
#                 "<span style='color:darkorchid1'>",
#                 "Run Chart: ",
#                 group_category,
#                 "</span>"
#                 )
# 
# subtitle <- paste0("In Grades - ",
#                      group_grade,
#                      ", ",
#                      "<br>",
#                      "for the Years Ended ",
#                      paste(min(desired_years),
#                            " - ",
#                            max(desired_years)
#                            )
#                      )
# 
# 
# # Create the chart with qicharts2
# plot <- qic(
#   x = df_group$year,
#   y = df_group$value,
#   chart = "run",
#   decimals = 0,
#   point.size = 2.5,
#   y.expand = y_expand,
#   scales = "free_y",
#   show.grid = TRUE,
#   ylab = df_group$units,
#   title = title,
#   subtitle = subtitle,
#   caption = caption,
#   show.labels = TRUE,
#   xlab = 'Academic Year-Ended'
# )
# 
# plot <- plot +
#  scale_y_continuous(
#   # limits = c(0, 60),
#   # breaks = seq(0, 60, 10),
#   labels = scales::number_format(accuracy = 1)
# ) +
#  annotate("text",
#            x = Inf,
#            y = y_min - 5,  # Adjust this value to place the text slightly below the minimum y value
#            label = "(centerline is the median)",
#            color = "red",
#            size = 4,
#            hjust = 1,  # Right align
#            vjust = 1   # Bottom align to position the text above this point
#            ) +
# 
# theme_minimal(base_size = 16) +
# theme(legend.position = "none") +
# theme(plot.title.position = "panel",
#       text = element_text(color = "royalblue",
#                           # family = "Roboto"
#                           ),
#       plot.title = ggtext::element_markdown(
#          color = "darkgreen",
#          size = rel(1.25),
#          face = "bold",
#          # family = "Roboto",
#          lineheight = 1.3,
#          margin = margin(0, 0, 0.25, 0, "lines"
#                          )
#          ),
# 
#       plot.subtitle = ggtext::element_markdown(
#          color = "darkgreen",
#          size = rel(1.10),
#          face = "bold",
#          lineheight = 1.3,
#          margin = margin(0, 0, 0.5, 0, "lines"
#                          )
#          ),
# 
#       plot.caption = element_text(color = "darkgreen",
#                                   size = rel(1.0),
#                                   face = "bold",
#                                   # family = "Roboto",
#                                   lineheight = 1.0,
#                                   margin = margin(0, 0, 0.5, 0, "lines"
#                                                   )
#                                   ),
# 
#       strip.text = element_text(# family = "Roboto",
#                                   color = "orange",
#                                   size = rel(1.1),
#                                   face = "bold",
#                                   margin = margin(2, 0, 0.5, 0, "lines"
#                                                   )
#                                   ),
# 
#        axis.text = element_text(color = "black"
#                                 ),
#        panel.background = element_rect(fill = "white", color = NA),
#        plot.background = element_rect(fill = "white", color = NA)
#   )
# 
# 
# 
# # Define the filename
# filename <- paste0(svg_folder,
#                   "/",
#                   gsub(" ",
#                        "",
#                        paste0(desired_section,
#                               group_category,
#                               group_units,
#                               group_grade,
#                               group_level,
#                               min(desired_years),
#                               max(desired_years)
#                               )
#                        ),
#                   ".svg"
#                   )
# 
#  # Return both the plot and the filename
#  return(list(plot = plot, filename = filename))
# 
#   } else {
# 
#  # Return NULL for groups with only one observation
#  return(NULL)
#   }
# }
# 
# # Apply the function with desired parameters for each category
# plots <- map(
#   first_df_grouped,
#   generate_run_chart,
#   desired_years = desired_years,
#   desired_grades = desired_grades
# )
# 
# 
# 
# 
# 
# # # Save each plot as a SVG file
# # walk(plots, ~ ggsave(
# #   .$filename,
# #   .$plot,
# #   width = 12,
# #   height = 9,
# #   units = 'in',
# #   # bg = 'white',
# #   # scaling = 1,
# #   dpi = 300,
# #   create.dir = TRUE
# #   )
# # )
# 
# 
# # # Stop recording
# # gg_stop_recording()
# 
# # Print the plots
# walk(plots, ~ print(.$plot))
# 
# #  END OF CREATE MULTIPLE STATIC PLOTS


```

<!-- UNCOMMENT THIS SECTION AND RUN IT TO  PRINT LIST OF-->
<!-- THE svg FILES (INDEPENDENTLY OF WHAT IS IN THE  -->
<!-- SPECIFIED svg STORAGE FOLDER) INTO THE CONSOLE -->
<!-- FOR COPY AND PASTE -->


<!-- Create Rmarkdown syntax to display all svg files in specified directory -->

```{r echo=FALSE, warning=FALSE, message=FALSE}

## START FROM SCRATCH AND CREATE LIST OF svg FILES GENERATED ABOVE
## FOR COPY AND PASTE FROM CONSOLE TO BODY OF QUARTO DOC

# Load Libraries

# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# library(camcorder)
# library(RColorBrewer)
# 
# 
# # # Load the data
# df2 <- read_csv(file = here::here("data",
#                                   "SCUC Snapshots 1995 to 2022-LONG.csv")
#                 )
# 
# 
# # Filter and arrange the data
# first_df <- df2 %>%
#  filter(section == "District_Perform"
#         ) %>%
#   mutate(sort = as.numeric(sort)) %>%
#   arrange(sort)
# 
# # Specify the desired section
# desired_section <- "District_Perform"
# 
# # Specify desired grouping categories
# desired_groupings = unique(first_df$grouping)
# 
# # Specify desired units of measurement
# desired_units <- unique(first_df$units)
# 
# # Specify desired years
# desired_years <- unique(first_df$year)
# 
# # Specify desired grade level
# desired_grades <- unique(first_df$grade)
# 
# # Specify desired achievement level
# desired_levels <- unique(first_df$level_achieved)
# 
# # Specify desired sorting order
# desired_order <- unique(first_df$sort)
# 
# 
# # Specify the svg folder name
# svg_folder <- paste0("svg_",
#                      desired_section)
# 
# 
# # Create a unique identifier for each combination of grouping, units, and grade
# 
# first_df <- first_df %>%
#  mutate(id = paste(grouping,
#                    units,
#                    grade,
#                    level_achieved)
#           )
# 
# # Get the unique combinations of grouping, units, and grade
# 
# unique_combinations <- unique(first_df$id)
# 
# # Create a vector of file names for each unique combination
# 
# filenames <- paste0(svg_folder,
#                      "/",
#                      gsub(" ",
#                           "",
#                           paste0(desired_section,
#                                           unique_combinations,
#                                           min(first_df$year),
#                                           max(first_df$year)
#                                  )
#                           ),
#                      ".svg"
#                      )
#  
#  
# # Loop through each file name and create the RMarkdown syntax
# 
# for (file in filenames) {
# 
# rmd_syntax <- paste0("\n",
#                      "\n",
#                      "\\clearpage",
#                      "\n",
#                      "\n",
#                      "Comment:\n",
#                      "<br>",
#                      "\n",
#                      "<br>",
#                      "\n",
#                      "<br>",
#                      "\n",
#                      "\n",
#                      "\\vspace{1.0in}",
#                      "\n",
#                      "\n",
#                      "![](",
#                      file,
#                      ")",
#                      "\n",
#                      "\n"
# )


# 
# # Print the RMarkdown syntax to the console
# cat(rmd_syntax)
# 
# }

```

<br>
 
```{r echo=FALSE, warning=FALSE, message=FALSE}
# 
# # Print the unique values
# print(desired_groupings)

```





\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformTotalStudentsinDistrictcountAllNA19952022.svg)

<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformTotalNumberofSchoolscountAllNA19952022.svg)

<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformAttendanceRaterateAllNA19952022.svg)

<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformCompletionRaterateAllNA19952022.svg)

<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformAnnualGraduateCountcountAllNA19952022.svg)

<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformAnnualRHSP-DAP-FHSP-E-FHSP-DLAGraduateCountcountAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_Perform4-YearLongitudinalGraduationRaterateAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_Perform5-YearLongitudinalGraduationRaterateAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_Perform6-YearLongitudinalGraduationRaterateAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformAnnualDropoutRaterateAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformAnnualDropoutRateGr9-12rateAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformFour-yearDropoutRaterateAllNA19952022.svg)
<br><br>

\clearpage

Comment:
<br><br>

\vspace{1.0in}

![](svg_District_Perform/District_PerformExit-LevelCumulativePassRaterateAllNA19952022.svg)
<br><br>

