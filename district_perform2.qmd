---
title: "Growth and Development"
author: "Dan Swart, Trustee"
editor: 
  markdown: 
    wrap: 72
---

Let your eyes wander over these plots to get a sense of the growth and
development of the district over the last 28 years. Using just your eyes
you will gain an appreciation for the accomplishments and growth of the
district.

Enjoy!

THE TAXES AND REVENUE SECTION IS GROUPED BY THE TEXAS EDUCATION AGENCY INTO THESE CATEGORIES FOR ANALYSIS



<!-- THERE ARE ONLY NINE PLOTS.  I'M HAVING PROBLEMS WITH LARGE DOLLAR AMOUNTS EXCEEDING MARGINS AND PRINTING IN EXPONENTIAL FORMAT.   -->

<!-- CONSIDER PREPARING THEM AS PLOT_LY PLOTS TO SEE IF THAT WORKS BETTER! -->


```{r echo=FALSE, warning=FALSE, message=FALSE, out.width="0.8\\textwidth"}

# Load Libraries

library(tidyverse)
library(qicharts2)
library(haven)
library(readxl)
library(skimr)
library(visdat)
library(gghighlight)
library(dplyr)
library(stringr)
library(ggtext)
library(gganimate)
library(ggplot2)
library(purrr)
library(scales)
library(ggrepel)
library(glue)
library(plotly)
library(htmlwidgets)
library(readr)



# DEFINITIONS AND PRINT UNIQUE ITEMS OF THE SECTION CHOSEN

# Load the data
df2 <- read_csv(file = here::here("data",
                                  "SCUC Snapshots 1995 to 2022-LONG.csv")
                )


# Specify the desired section
desired_section <- "District_Perform"

png_folder <- paste0("png_",
                     desired_section)

# Filter data frame to include only those rows specified by section
first_df <- df2 %>%
  filter(section == desired_section
         )

# Specify desired grouping categories
desired_groupings <- unique(first_df$grouping)

# Specify desired units of measurement
desired_units <- unique(first_df$units)

# Specify desired years
desired_years <- unique(first_df$year)

# Specify desired grade level
desired_grades <- unique(first_df$grade)

# Print the unique values
print(desired_groupings)


```
<br>

THE PLOTS FOR YOUR REVIEW AND CONSIDERATION


```{r echo=FALSE, warning=FALSE, message=FALSE}

#  FUNCTION TO CREATE MULTIPLE STATIC PLOTS WITH GGPLOT2


# Define a custom label formatting function
custom_label_func <- function(x) {
  # For values greater than or equal to 1 million, format without exponential notation and with commas
  if (any(abs(x[!is.na(x)]) >= 1e6)) {
    # For other values, use the default formatting with commas
    
    return(format(x, 
                  big.mark = ",", 
                  scientific = FALSE
                  )
           )
  } else {
    # For other values, use the default formatting with commas
    return(format(x, 
                  big.mark = ","
                  )
           )
  }
}



# Filter and group the data in df2 based on desired_* designations
# first_df = df2 filtered by desired section
# first_df_grouped is used in the map() function as the first element in the loop to make the plots

first_df_grouped <- first_df %>%
  filter((grouping %in% desired_groupings) &
           (year %in% desired_years) &
           (units %in% desired_units) &
           (grade %in% desired_grades)
  ) %>%
  group_by(grouping) %>%
  group_split()


# Define the function with arguments for desired parameters
generate_run_chart <- function(df_group, 
                               desired_years, 
                               desired_grades) {
  # Check if the group has more than one observation
  if (nrow(df_group) > 1) {
    # Access the unique values for grouping and grade
    group_category <- unique(df_group$grouping)
    group_grade <- unique(df_group$grade)
    group_units <- unique(df_group$units)
    group_level <- unique(df_group$level_achieved)
    
    # Calculate the y-axis range based on the minimum and maximum values of the 'value' column
    y_min <- min(df_group$value, 
                 na.rm = TRUE
    )
    y_max <- max(df_group$value,
                 na.rm = TRUE
    )
    y_range <- y_max - y_min
    
    # Set the desired maximum range for the y-axis
    max_y_range <- y_range + .20  # You can adjust this value based on your preference
    # Set the desired expansion factor
    expansion_factor <- ifelse(y_range < max_y_range,
                               max_y_range - y_range, 
                               0
    )
    
    # Calculate the y.expand value to set the y-axis limits dynamically
    y_expand <- y_max + expansion_factor
    
    # Create dynamic title and subtitle
    title <- paste0(desired_section,
                    "\n",
                    group_category, 
                    " (",
                    group_units,
                    ")",
                    ","
    )
    subtitle <- paste0("for Grades - ", 
                       group_grade,
                       ", ",
                       "for the Years Ended ", 
                       paste(min(desired_years),
                             " - ", 
                             max(desired_years)
                       )
    )
    caption <- c("The centerline shown is the Median of the data")
    
    # Create the chart with qicharts2
    plot <- qic(
      x = df_group$year,
      y = df_group$value,
      chart = "run",
      decimals = 0,
      point.size = 2.0,
      y.expand = y_expand,
      scales = "free_y",
      show.grid = TRUE,
      title = title,
      subtitle = subtitle,
      caption = caption,
      show.labels = TRUE,
      xlab = 'Academic Year-Ended'
    )
    
    # Customize text using ggplot2 functions
    
    plot <- plot +
      scale_y_continuous(labels = custom_label_func) +  # Customize y-axis labels
      theme(
        plot.title = element_text(face = "bold"),
        # Make title bold
        plot.subtitle = element_text(face = "bold"),
        # Make subtitle bold
        plot.caption = element_text(face = "bold"),
        # Make caption bold
        axis.title.x = element_text(face = "bold"),
        # Make x-axis label bold
        axis.title.y = element_text(face = "bold"),
        # Make y-axis label bold
        plot.margin = margin(2, 0, 2, 2, "cm") # Adjust plot margins to prevent truncation
      )
    
    # Define the filename
    filename <- paste0(png_folder,
                       "/",
                       gsub(" ", "", paste0(desired_section,
                                             group_category,
                                             group_units,
                                             group_grade,
                                             min(desired_years),
                                             max(desired_years)
                       )), 
                       ".png"
    )
    
    # Return both the plot and the filename
    return(list(plot = plot, filename = filename))
    
  } else {
    # Return NULL for groups with only one observation
    return(NULL)
  }
}

# Apply the function with desired parameters for each category
plots <- map(
  first_df_grouped,
  generate_run_chart,
  desired_years = desired_years,
  desired_grades = desired_grades
)

# Save each plot as a PNG file
walk(plots, ~ ggsave(
  .$filename,
  .$plot,
  width = 2000,
  height = 1000,
  units = "px",
  dpi = 300,
  create.dir = TRUE
))

# Print the plots
walk(plots, ~ print(.$plot))

#  CREATE MULTIPLE STATIC PLOTS

```


<!-- UNCOMMENT THIS FUNCTION WHEN YOU WANT TO GENERATE <IMG> TAGS FOR EACH FILE -->
<!-- PRINT LIST OF THE PNG FILES IN THE SPECIFIED PNG STORAGE FOLDER TO THE CONSOLE -->

```{r echo=FALSE, warning=FALSE, message=FALSE}

#####  PRINT LIST OF PNGS, IN RMARKDOWN SYNTAX,
#####  TO THE CONSOLE, IN RMARKDOWN SYNTAX, SO I CAN
#####  COPY AND PASTE THEM INTO THIS QUARTO BOOK DOC

# # Get the list of PNG files in the "png_folder" directory
#  png_files <- list.files(png_folder, pattern = "\\.png$", full.names = TRUE)
#  
#  # Loop through each PNG file and create an HTML <img> tag
#  for (file in png_files) {
#    # Extract the filename without the directory path
#    filename <- basename(file)
#    
#    # Create the HTML <img> tag with the specified width and height
#    img_tag <- paste0("<img src=\"", file, "\" width=\"900\" height=\"900\">")
#    
#    # Print the comment and the HTML <img> tag to the console
#    cat(" Comment: ", img_tag, "", "\n")
#  }

```
<br>

```{r echo=FALSE, warning=FALSE, message=FALSE}

# Print the unique values
# print(desired_groupings)

```

<!-- WORK ON THIS SECTION LATER -->

<!-- THIS WORKS WELL IN HTML, BUT SUCKS WITH PDF RENDERING -->
<!-- PRINT THE PLOTS FROM THE PNG FILES -->
<!-- <br> -->
<br>

<!--  [2] "Total Students in District"     -->
<!--  <br> Comment: <img src="png_District_Perform/District_Perform - Total Students in District (count),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="900">   -->

<!-- [1] "Total Number of Schools"         -->
<!--  Comment:  <img src="png_District_Perform/District_Perform - Total Number of Schools (count),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!--  [3] "Attendance Rate"             -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - Attendance Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!--   [8] "Annual Graduate Count"     -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - Annual Graduate Count (count),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!--  [9] "Annual RHSP-DAP-FHSP-E-FHSP-DLA Graduate Count" -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - Annual RHSP-DAP-FHSP-E-FHSP-DLA Graduate Count (count),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">  -->

<!--  [5] "4-Year Longitudinal Graduation Rate"   -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - 4-Year Longitudinal Graduation Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="1000">   -->

<!--  [6] "5-Year Longitudinal Graduation Rate"    -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - 5-Year Longitudinal Graduation Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!--  [7] "6-Year Longitudinal Graduation Rate"    -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - 6-Year Longitudinal Graduation Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!-- [10] "Annual Dropout Rate"           -->
<!--  Comment:  <img src="png_District_Perform/District_Perform - Annual Dropout Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!-- [4] "Annual Dropout Rate Gr 9-12"    -->
<!--   Comment:  <img src="png_District_Perform/District_Perform - Annual Dropout Rate Gr 9-12 (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!-- [11] "Four-year Dropout Rate"      -->
<!--  Comment:  <img src="png_District_Perform/District_Perform - Four-year Dropout Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!-- [12] "Completion Rate"        -->
<!--  Comment:  <img src="png_District_Perform/District_Perform - Completion Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->

<!-- [13] "Exit-Level Cumulative Pass Rate"    -->
<!--  Comment:  <img src="png_District_Perform/District_Perform - Exit-Level Cumulative Pass Rate (percent),_for Grades - All, for the Years Ended 1995  -  2022.png" width="700" height="500">   -->


<br> <br> <br>
