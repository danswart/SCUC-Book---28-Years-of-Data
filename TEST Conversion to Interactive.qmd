---
title: "TEST CONVERSION TO INTERACTIVE"
author: "Dan Swart, Trustee, Seat 6"
editor: 
  markdown: 
    wrap: 72
---

<br>
<br>
<br>

This is a test of plotly on ggplot2 charts

<br>
<br>
<br>

Enjoy!

<br>
##  Avg STAAR Scores by TEA Ethnic Classification - All Grades - Approaches or Above

<!-- CONSIDER PREPARING THEM AS PLOT_LY PLOTS TO SEE IF THAT WORKS BETTER! -->


```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=8, fig.height=7}

# Load Libraries

library(tidyverse)
library(qicharts2)
library(haven)
library(readxl)
library(skimr)
library(visdat)
library(gghighlight)
library(dplyr)
library(stringr)
library(ggtext)
library(gganimate)
library(ggplot2)
library(purrr)
library(scales)
library(ggrepel)
library(glue)
library(plotly)
library(htmlwidgets)
library(readr)
library(camcorder)
library(RColorBrewer)

options(scipen = 999)

# Define a custom label formatting function
custom_label_func <- function(x) {
  # For values greater than or equal to 1 million, format without exponential notation and with commas
  if (any(abs(x[!is.na(x)]) >= 1e6)) {
    # For other values, use the default formatting with commas
    return(format(x, big.mark = ",", scientific = FALSE))
  } else {
    # For other values, use the default formatting with commas
    return(format(x, big.mark = ","))
  }
}

# Load the data
df2 <- read_csv(file = here::here("data", "SCUC Snapshots 1995 to 2022-LONG.csv"))

# Filter data frame to include only specified rows 
first_df <- df2 %>%
  filter(section == "Standardized_Scores" & 
         level_achieved == "Approaches_or_Above" &
         str_detect(sort, "^E[1-7]$")) %>%
  arrange(sort)

# Specify the desired section
desired_section <- "Standardized_Scores"

# Specify desired grouping categories
desired_groupings = unique(first_df$grouping)

# Specify desired units of measurement
desired_units <- unique(first_df$units)

# Specify desired years
desired_years <- unique(first_df$year)

# Specify desired grade level
desired_grades <- unique(first_df$grade)

# Specify desired achievement level
desired_levels <- unique(first_df$level_achieved)

# Specify desired sorting order
desired_order <- unique(first_df$sort)

# Specify the caption for the plots
caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")

html_folder <- paste0("html_", desired_section)

# Replace zeros in the value column with NA
first_df$value <- ifelse(first_df$value == 0, NA, first_df$value)

# Group the data frame and sort by the desired sorting column
first_df_grouped <- first_df %>%
  group_by(sort, grouping, grade) %>%
  group_split()


# Define a function to generate plotly plots and save as HTML
generate_plotly_chart <- function(df_group, desired_years, desired_grades) {
  
  # Check if the group has more than one observation
  if (nrow(df_group) > 1) {
    
    # Access the unique values for the variables
    group_category <- unique(df_group$grouping)
    group_grade <- unique(df_group$grade)
    group_units <- unique(df_group$units)
    group_level <- unique(df_group$level_achieved)
    
    # Create dynamic title and subtitle
    title <- paste0("Average STAAR Scores for Students",
                    "<br>",
                    "Classified as ",
                    "<span style='color:darkorchid1'>",
                    group_category,
                    "</span>")
    
    subtitle <- paste0("In Grades - ",
                       group_grade,
                       ", ",
                       "at the Level of ",
                       "<span style='color:darkorchid1'>",
                       group_level,
                       "</span>",
                       "<br>",
                       "for the Years Ended ",
                       paste(min(desired_years),
                             " - ",
                             max(desired_years)))
    
    # Create a ggplot2 plot using qicharts2
    plot <- qic(
      x = df_group$year,
      y = df_group$value,
      chart = "run",
      decimals = 0,
      point.size = 2.5,
      scales = "free_y",
      ylab = df_group$units,
      title = title,
      subtitle = subtitle
    )
    
    # Convert ggplot2 plot to plotly
    plotly_plot <- ggplotly(plot)
    
    # Define the filename for HTML file
    filename <- paste0(html_folder,
                       "/",
                       gsub(" ",
                            "",
                            paste0(desired_section,
                                   group_category,
                                   group_units,
                                   group_grade,
                                   group_level,
                                   min(desired_years),
                                   max(desired_years))),
                       ".html")
    
    # Save the Plotly plot as an HTML file
    saveWidget(plotly_plot, file = filename)
    
    # Return the plotly plot object (optional)
    return(plotly_plot)
    
  } else {
    # Return NULL for groups with only one observation
    return(NULL)
  }
}

# Apply the function with desired parameters for each category
for (group in first_df_grouped) {
  generate_plotly_chart(group, desired_years, desired_grades)
}


# Stop recording
# gg_stop_recording()

# Print the plots
# walk(plots, ~ print(.$plot))

#  CREATE MULTIPLE STATIC PLOTS

```

<!-- UNCOMMENT THIS SECTION AND RUN IT TO  PRINT LIST OF-->
<!-- THE html FILES (INDEPENDENTLY OF WHAT IS IN THE  -->
<!-- SPECIFIED html STORAGE FOLDER) INTO THE CONSOLE -->
<!-- FOR COPY AND PASTE -->

<!-- Create Rmarkdown syntax to display all html files in specified directory -->

```{r echo=FALSE, warning=FALSE, message=FALSE}

## START FROM SCRATCH AND CREATE LIST OF html FILES GENERATED ABOVE
## FOR COPY AND PASTE FROM CONSOLE TO BODY OF QUARTO DOC

# Load Libraries
 
# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# 
# options(scipen = 999)
# 
# # Load the data
# df2 <- read_csv(file = here::here("data",
#                                   "SCUC Snapshots 1995 to 2022-LONG.csv"
#                                   )
#                 )
# 
# # Specify the desired section
# desired_section <- "Standardized_Scores"
# 
# # Specify desired grouping categories
# desired_groupings = unique(first_df$grouping)
# 
# # Specify desired units of measurement
# desired_units <- unique(first_df$units)
# 
# # Specify desired years
# desired_years <- unique(first_df$year)
# 
# # Specify desired grade level
# desired_grades <- unique(first_df$grade)
# 
# # Specify desired achievement level
# desired_levels <- unique(first_df$level_achieved)
# 
# # Specify desired sorting order
# desired_order <- unique(first_df$sort)
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# 
# # Filter data frame to include only those rows specified by desired section
# 
# first_df <- df2 %>%
#  filter(section == "Standardized_Scores" & 
#         level_achieved == "Approaches_or_Above" &
#         str_detect(sort, "^E[1-7]$") 
#         ) %>%
#  arrange(sort)
# 
# 
# # Create a unique identifier for each combination of grouping, units, and grade
# 
# first_df <- first_df %>%
#   mutate(id = paste(grouping,
#                     units,
#                     grade,
#                     level_achieved)
#          )
# 
# # Get the unique combinations of grouping, units, and grade
# 
# unique_combinations <- unique(first_df$id)
# 
# # Create a vector of file names for each unique combinations
# 
# filenames <- paste0(plotly_folder,
#                     "/",
#                     gsub(" ",
#                          "",
#                          paste0(desired_section,
#                                          unique_combinations,
#                                          min(first_df$year),
#                                          max(first_df$year)
#                                 )
#                          ),
#                     ".html"
#                     )
# 
# 
# # Loop through each file name and create the RMarkdown syntax
# 
# for (file in filenames) {
# 
#   rmd_syntax <- paste0("\n",
#                        "\\clearpage",
#                        "\n",
#                        "\n",
#                        "Comment:\n",
#                        "\n",
#                        "![](",
#                        file,
#                        ")",
#                        "\n"
#   )
# 
# # Print the RMarkdown syntax to the console
# cat(rmd_syntax)
# 
# }


```


```{r}
generate_run_chart <- function(df_group, desired_years, desired_grades) {
  if (nrow(df_group) > 1) {
    group_category <- unique(df_group$grouping)
    group_grade <- unique(df_group$grade)
    group_units <- unique(df_group$units)
    group_level <- unique(df_group$level_achieved)

    y_min <- min(df_group$value, na.rm = TRUE)
    y_max <- max(df_group$value, na.rm = TRUE)
    y_range <- y_max - y_min
    max_y_range <- y_range + 0.5
    expansion_factor <- ifelse(y_range < max_y_range, max_y_range - y_range, 0)
    y_expand <- y_max + expansion_factor

    title <- paste0("Average STAAR Scores for Students", "<br>", "Classified as ", "<span style='color:darkorchid1'>", group_category, "</span>")
    subtitle <- paste0("In Grades - ", group_grade, ", ", "at the Level of ", "<span style='color:darkorchid1'>", group_level, "</span>", "<br>", "for the Years Ended ", paste(min(desired_years), " - ", max(desired_years)))

    # Create the initial plot using ggplot2
    plot <- ggplot(df_group, aes(x = year, y = value)) +
      geom_line() +
      geom_point() +
      scale_y_continuous(labels = scales::percent_format(scale = 1, accuracy = 1), limits = c(20, 100), breaks = seq(20, 100, 10)) +
      labs(title = title, subtitle = subtitle, caption = caption, x = "Academic Year-Ended", y = group_units) +
      theme_minimal(base_size = 16) +
      theme(legend.position = "none", plot.title = ggtext::element_markdown(size = rel(1.25), face = "bold", lineheight = 1.3), plot.subtitle = ggtext::element_markdown(size = rel(1.10), face = "bold", lineheight = 1.3), plot.caption = element_text(size = rel(1.0), face = "bold", lineheight = 1.0), strip.text = element_text(color = "orange", size = rel(1.1), face = "bold"), axis.text = element_text(color = "black"), panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA))

    # Convert to Plotly plot
    plotly_plot <- ggplotly(plot)

    # Define the filename
    filename <- paste0(html_folder, "/", gsub(" ", "", paste0(desired_section, group_category, group_units, group_grade, group_level, min(desired_years), max(desired_years))), ".html")

    # Save the Plotly plot as an HTML file
    saveWidget(plotly_plot, file = filename)

    return(plotly_plot)
  } else {
    return(NULL)
  }
}

```


IMAGES FROM html FILES


