---
title: "Avg STAAR Scores by Other TEA Classification - All Grades - Approaches or Above"
author: "Dan Swart, Trustee, Seat 6"
editor: 
  markdown: 
    wrap: 72
---

<br>
<br>
<br>

Let your eyes wander over these plots and get a sense of the growth and
development of the district over the last 28 years. Using just your eyes
you will gain an appreciation for the accomplishments and growth of the
district.

<br>
<br>
<br>

Enjoy!

<br>

##  Other TEA Classifications - All Grades - Approaches or Above


```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=8, fig.height=7}

# Load Libraries

library(tidyverse)
library(qicharts2)
library(haven)
library(readxl)
library(skimr)
library(visdat)
library(gghighlight)
library(dplyr)
library(stringr)
library(ggtext)
library(gganimate)
library(ggplot2)
library(purrr)
library(scales)
library(ggrepel)
library(glue)
library(plotly)
library(htmlwidgets)
library(readr)
library(camcorder)
library(RColorBrewer)

options(scipen = 999)

# Start recording
# gg_record(
#   dir = "recording",
#   device = "pdf",
#   width = 8,
#   height = 7,
#   units = "in",
#   dpi = 300
# )

# Define a custom label formatting function
custom_label_func <- function(x) {
  
  # For values greater than or equal to 1 million, format without exponential notation and with commas
  if (any(abs(x[!is.na(x)]) >= 1e6)) {
    
    # For other values, use the default formatting with commas
    return(format(x, big.mark = ",", scientific = FALSE))
  } else {
    
    # For other values, use the default formatting with commas
    return(format(x, big.mark = ","))
  }
}

# Load the data
df2 <- read_csv(file = here::here("data", 
                                  "SCUC Snapshots 1995 to 2022-LONG.csv")
                )

# Filter data frame to include only specified rows 

first_df <- df2 %>%
 filter(section == "Standardized_Scores" & 
        level_achieved == "Approaches_or_Above" &
        str_detect(sort, "^O[1-2]$"
                   )
        ) %>%
 arrange(sort)

# Specify the desired section
desired_section <- "Standardized_Scores"

# Specify desired grouping categories
desired_groupings = unique(first_df$grouping)

# Specify desired units of measurement
desired_units <- unique(first_df$units)

# Specify desired years
desired_years <- unique(first_df$year)

# Specify desired grade level
desired_grades <- unique(first_df$grade)

# Specify desired achievement level
desired_levels <- unique(first_df$level_achieved)

# Specify desired sorting order
desired_order <- unique(first_df$sort)

# Specify the caption for the plots
caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")

png_folder <- paste0("png_", desired_section)
 
# Replace zeros in the value column with NA
first_df$value <- ifelse(first_df$value == 0, NA, first_df$value)
 

# Group the data frame and sort by the desired sorting column
first_df_grouped <- first_df %>%
  group_by(sort, grouping, grade) %>%
  group_split()


# Define the function with arguments for desired parameters
generate_run_chart <- function(df_group, desired_years, desired_grades) {
  
  # Check if the group has more than one observation
  if (nrow(df_group) > 1) {
    
    # Access the unique values for the variables
    group_category <- unique(df_group$grouping)
    group_grade <- unique(df_group$grade)
    group_units <- unique(df_group$units)
    group_level <- unique(df_group$level_achieved)

    # Calculate the y-axis range based on the minimum and maximum values of the 'value' column
    y_min <- min(df_group$value, na.rm = TRUE)
    y_max <- max(df_group$value, na.rm = TRUE)
    y_range <- y_max - y_min

    # Set the desired maximum range for the y-axis
    max_y_range <- y_range + .50  # adjust this value based on your preference

    # Set the desired expansion factor
    expansion_factor <- ifelse(y_range < max_y_range, max_y_range - y_range, 0)

    # Calculate the y.expand value to set the y-axis limits dynamically
    y_expand <- y_max + expansion_factor

# Create dynamic title and subtitle
title <- paste0("Average STAAR Scores for Students",
                "<br>",
                "Classified as ",
                "<span style='color:darkorchid1'>",
                group_category,
                "</span>"
                # " (",
                # group_units,
                # ")",
                # ","
                )

subtitle <- paste0("In Grades - ",
                     group_grade,
                     ", ",
                     "at the Level of ",
                     "<span style='color:darkorchid1'>",
                     group_level,
                     "</span>",
                     "<br>",
                     "for the Years Ended ",
                     paste(min(desired_years),
                           " - ",
                           max(desired_years)
                           )
                     )

# Create the chart with qicharts2
plot <- qic(
  x = df_group$year,
  y = df_group$value,
  chart = "run",
  decimals = 0,
  point.size = 2.5,
  y.expand = y_expand,
  scales = "free_y",
  show.grid = TRUE,
  ylab = df_group$units,
  title = title,
  subtitle = subtitle,
  caption = caption,
  show.labels = TRUE,
  xlab = 'Academic Year-Ended'
)

# Customize features using ggplot2 functions
plot <- plot +
  scale_y_continuous(labels = scales::percent_format(scale = 1, accuracy = 1),
                     limits = c(20, 100),
                     breaks = seq(20, 100, 10)) +
   annotate("text",
           x = Inf,
           y = 25,  # place it in the lower portion of the plot
           label = "(centerline is the median)",
           color = "red",
           size = 4,
           hjust = 1,  # Right align
           vjust = 0   # Top align
           ) +

theme_minimal(base_size = 16) +
theme(legend.position = "none") +
theme(plot.title.position = "panel",
      text = element_text(color = "royalblue",
                          # family = "Roboto"
                          ),
      plot.title = ggtext::element_markdown(
         color = "darkgreen",
         size = rel(1.25),
         face = "bold",
         # family = "Roboto",
         lineheight = 1.3,
         margin = margin(0, 0, 0.25, 0, "lines"           
                         )
         ),
     
      plot.subtitle = ggtext::element_markdown(
         color = "darkgreen",
         size = rel(1.10),
         face = "bold",
         lineheight = 1.3,
         margin = margin(0, 0, 0.5, 0, "lines"
                         )
         ),
    
      plot.caption = element_text(color = "darkgreen",
                                  size = rel(1.0),
                                  face = "bold",
                                  # family = "Roboto",
                                  lineheight = 1.0,
                                  margin = margin(0, 0, 0.5, 0, "lines"
                                                  )
                                  ),
      
      strip.text = element_text(# family = "Roboto",
                                  color = "orange",
                                  size = rel(1.1),
                                  face = "bold",
                                  margin = margin(2, 0, 0.5, 0, "lines"
                                                  )
                                  ),
      
       axis.text = element_text(color = "black"
                                ),
       panel.background = element_rect(fill = "white", color = NA),
       plot.background = element_rect(fill = "white", color = NA)
  )

  # Display the plot
 print(plot)

 # Define the filename
 filename <- paste0(png_folder,
                    "/",
                    gsub(" ",
                         "",
                         paste0(desired_section,
                                group_category,
                                group_units,
                                group_grade,
                                group_level,
                                min(desired_years),
                                max(desired_years)
                                )
                         ),
                    ".png"
                    )

 # Return both the plot and the filename
 return(list(plot = plot, filename = filename))

  } else {
    
 # Return NULL for groups with only one observation
 return(NULL)
  }
}

# Apply the function with desired parameters for each category
plots <- map(
  first_df_grouped,
  generate_run_chart,
  desired_years = desired_years,
  desired_grades = desired_grades
)


# Save each plot as a PNG file
walk(plots, ~ ggsave(
  .$filename,
  .$plot,
  width = 8,
  height = 7,
  units = 'in',
  # bg = 'white',
  # scaling = 1,
  dpi = 300,
  create.dir = TRUE
  )
)

# Stop recording
# gg_stop_recording()

# Print the plots
# walk(plots, ~ print(.$plot))

#  CREATE MULTIPLE STATIC PLOTS

```

<!-- UNCOMMENT THIS SECTION AND RUN IT TO  PRINT LIST OF-->
<!-- THE PNG FILES (INDEPENDENTLY OF WHAT IS IN THE  -->
<!-- SPECIFIED PNG STORAGE FOLDER) INTO THE CONSOLE -->
<!-- FOR COPY AND PASTE -->

<!-- Create Rmarkdown syntax to display all png files in specified directory -->

```{r echo=FALSE, warning=FALSE, message=FALSE}

## START FROM SCRATCH AND CREATE LIST OF PNG FILES GENERATED ABOVE
## FOR COPY AND PASTE FROM CONSOLE TO BODY OF QUARTO DOC

# Load Libraries

# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# 
# options(scipen = 999)
# 
# # Load the data
# df2 <- read_csv(file = here::here("data",
#                                   "SCUC Snapshots 1995 to 2022-LONG.csv"
#                                   )
#                 )
# 
# # Specify the desired section
# desired_section <- "Standardized_Scores"
# 
# # Specify desired grouping categories
# desired_groupings = unique(first_df$grouping)
# 
# # Specify desired units of measurement
# desired_units <- unique(first_df$units)
# 
# # Specify desired years
# desired_years <- unique(first_df$year)
# 
# # Specify desired grade level
# desired_grades <- unique(first_df$grade)
# 
# # Specify desired achievement level
# desired_levels <- unique(first_df$level_achieved)
# 
# # Specify desired sorting order
# desired_order <- unique(first_df$sort)
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# 
# # Filter data frame to include only those rows specified by desired section
# 
# first_df <- df2 %>%
#  filter(section == "Standardized_Scores" & 
#         level_achieved == "Approaches_or_Above" &
#         str_detect(sort, "^O[1-2]$"
#                    )
#         ) %>%
#  arrange(sort)
# 
# 
# # Create a unique identifier for each combination of grouping, units, and grade
# 
# first_df <- first_df %>%
#   mutate(id = paste(grouping,
#                     units,
#                     grade,
#                     level_achieved)
#          )
# 
# # Get the unique combinations of grouping, units, and grade
# 
# unique_combinations <- unique(first_df$id)
# 
# # Create a vector of file names for each unique combinations
# 
# filenames <- paste0(png_folder,
#                     "/",
#                     gsub(" ",
#                          "",
#                          paste0(desired_section,
#                                          unique_combinations,
#                                          min(first_df$year),
#                                          max(first_df$year)
#                                 )
#                          ),
#                     ".png"
#                     )
# 
# 
# # Loop through each file name and create the RMarkdown syntax
# 
# for (file in filenames) {
# 
#   rmd_syntax <- paste0("\n",
#                        "\\clearpage",
#                        "\n",
#                        "\n",
#                        "Comment:\n",
#                        "\n",
#                        "![](",
#                        file,
#                        ")",
#                        "\n"
#   )
# 
# # Print the RMarkdown syntax to the console
# cat(rmd_syntax)
# 
# }


```


IMAGES FROM PNG FILES


\clearpage

Comment:

![](png_Standardized_Scores/Standardized_ScoresEconomicallyDisadvantagedscoreAllApproaches_or_Above19952022.png)

\clearpage

Comment:

![](png_Standardized_Scores/Standardized_ScoresSDAAMetARDscoreAllApproaches_or_Above19952022.png)
