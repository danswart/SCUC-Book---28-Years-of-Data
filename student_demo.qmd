---
title: "Changes in Composition"
author: "Dan Swart, Trustee, Seat 6"
editor: 
  markdown: 
    wrap: 72
---


<br>
<br>
<br>

Let your eyes wander over these plots and get a sense of the growth and
development of the district over the last 28 years. Using just your eyes
you will gain an appreciation for the accomplishments and growth of the
district.

<br>
<br>
<br>

Enjoy!

<br>
\clearpage

**Comment:**
<br>
<br>
<br>

\vspace{1.0in}


![](recording/student-demo-ethnic-2024_05_29_13_05_13.125282.png)


\clearpage

**Comment:**
<br>
<br>
<br>

\vspace{1.0in}



![](recording/student-demo-other-cats-2024_05_29_13_14_50.332520.png)



<!-- CONSIDER PREPARING THEM AS PLOT_LY PLOTS TO SEE IF THAT WORKS BETTER! -->


```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=7, fig.height=6}

#####  NOT SURE YOU CANNOT USE GGREPEL AND GGTEXT AT THE SAME TIME!!!

#####  GENERATE PLOT WITH THIS CODE, DISPLAY THE PDF ABOVE

#####  COMMENT THIS SECTION OUT WHEN PDF FILE IN PLACE ABOVE


# Load libraries

# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# library(RColorBrewer)
# library(forcats)
# library(showtext)
# library(camcorder)
# 
# options(scipen = 999)
# 
# # Load fonts
# 
# # font_add_google("Yanone Kaffeesatz",
# #                 "yanone")
# # showtext.auto()
# 
# # Start recording
# gg_record(
#   dir = "recording",
#   device = "pdf",
#   width = 8,
#   height = 7,
#   units = "in",
#   dpi = 300
# )
# 
# # Load the data
# df2 <- read_csv(file = here::here("data", "SCUC Snapshots 1995 to 2022-LONG.csv"))
# 
# # Specify the desired section
# desired_section <- "Students"
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# 
# # Filter data frame to include only those rows specified by section
# e_df <- df2 %>%
#   filter(section == desired_section & str_detect(sort, "^E[1-7]$")) %>%
#   arrange(sort)
# 
# # Replace zeros in the value column with NA
# e_df$value <- ifelse(e_df$value == 0, NA, e_df$value)
# 
# # Define the main categories and the "Other" categories
# main_categories <- c("White", "Hispanic", "African American")
# other_categories <- setdiff(unique(e_df$grouping), main_categories)
# 
# # Create a new 'grouping' column
# e_df <- e_df %>%
#   mutate(grouping_new = ifelse(grouping %in% main_categories, grouping, "Other"))
# 
# # Aggregate the 'Other' category
# e_df_agg <- e_df %>%
#   group_by(year, grouping_new) %>%
#   summarise(value = sum(value, na.rm = TRUE), .groups = 'drop')
# 
# # Filter data frame to include only the first and last rows for each group for labeling
# e_df_first_last <- e_df_agg %>%
#   group_by(grouping_new) %>%
#   filter(row_number() == 1 | row_number() == n())
# 
# # Create a multi-line chart with the new grouping
# plot_E <- ggplot(e_df_agg, aes(x = year, y = value, group = grouping_new, color = grouping_new)) +
#   geom_line(na.rm = TRUE) +
#   geom_point(na.rm = TRUE) +
#   scale_y_continuous(labels = scales::percent_format(scale = 1, accuracy = 1),
#                      limits = c(0, 80),
#                      breaks = seq(0, 80, 10)) +
#   geom_label_repel(data = e_df_first_last,
#                    mapping = aes(label = glue("{grouping_new}: {scales::percent(value/100, accuracy = 1)}")),
#                    nudge_y = 2,
#                    # arrow = arrow(length = unit(0.03, "npc")),
#                    na.rm = TRUE) +
#   labs(x = "Year",
#        y = "Percent of Student Body",
#        title = "Changes in Ethnic Makeup of \nStudents Over Time",
#        subtitle = "1995 - 2022",
#        caption = caption
#        ) +
# 
#   # Adjust the number of colors for the new groups
#   scale_color_manual(values = brewer.pal(n = 5,
#                                          name = "Dark2"
#                                          )
#                      ) +
#   theme_minimal(base_size = 16) +
#   theme(legend.position = "none") +
#   theme(plot.title.position = "plot",
#     text = element_text(color = "royalblue",
#                             # family = "Roboto"
#                             ),
#         plot.title = element_text(color = "darkgreen",
#                                                     size = rel(1.25),
#                                                     face = "bold",
#                                                     # family = "Roboto",
#                                                     lineheight = 1.0,
#                                                     margin = margin(0.5, 0, 0.5, 0, "lines"
#                                                                     )
#                                                     ),
#         plot.subtitle = element_text(color = "darkgreen",
#                                      size = rel(1.10),
#                                      face = "bold",
#                                      lineheight = 0.7,
#                                      margin = margin(0, 0, 0.5, 0, "lines"
#                                                      )
#                                      ),
#         plot.caption = element_text(color = "darkgreen",
#                                     size = rel(1.0),
#                                     face = "bold",
#                                     # family = "Roboto",
#                                     lineheight = 1.0,
#                                     margin = margin(0.5, 0, 0.5, 0, "lines"
#                                                     )
#                                     ),
#         strip.text = element_text(# family = "Roboto",
#                                   color = "orange",
#                                   size = rel(1.1),
#                                   face = "bold",
#                                   margin = margin(2, 0, 0.5, 0, "lines"
#                                                   )
#                                   ),
#         axis.text = element_text(color = "black"
#                                  ),
#         panel.background = element_rect(fill = "white", color = NA),
#         plot.background = element_rect(fill = "white", color = NA)
#     )
# 
# 
# # Print the plot
# print(plot_E)
# 
# # Stop recording
# gg_stop_recording()


```




```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=8, fig.height=7}

#####  YOU CANNOT USE GGREPEL AND GGTEXT AT THE SAME TIME!!!

# Load libraries

# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# library(RColorBrewer)
# library(forcats)
# library(showtext)
# library(camcorder)
# 
# options(scipen = 999)
# 
# # Load fonts
# 
# # font_add_google("Cabin",
# #                "Cabin")
# # showtext.auto()
# 
# # Start recording
# gg_record(
#   dir = "recording",
#   device = "pdf",
#   width = 8,
#   height = 7,
#   units = "in",
#   dpi = 300
# )
# 
# 
# # Load the data
# df2 <- read_csv(file = here::here("data", "SCUC Snapshots 1995 to 2022-LONG.csv"))
# 
# # Specify the desired section
# desired_section <- "Students"
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# # Filter data frame to include only those rows specified by section
# misc_df <- df2 %>%
#   filter(section == desired_section & str_detect(sort, "^MISC[1-6]$"))
# 
# # Replace zeros in the value column with NA
# misc_df$value <- ifelse(misc_df$value == 0, NA, misc_df$value)
# 
# # Define the main categories and the "Other" categories
# main_categories <- c("Economically Disadvantaged", "Career and Technology Ed", "Special Education", "Gifted and Talented Ed")
# other_categories <- setdiff(unique(misc_df$grouping), main_categories)
# 
# # Create a mapping between original descriptions and abbreviations
# abbreviations <- c(
#   "Economically Disadvantaged" = "Econ Disadv",
#   "Career and Technology Ed" = "CTE",
#   "Special Education" = "SPED",
#   "Gifted and Talented Ed" = "Gifted",
#   "Other" = "Other"
# )
# 
# # Create a new 'grouping' column with abbreviations
# misc_df <- misc_df %>%
#   mutate(grouping_new = ifelse(grouping %in% main_categories, grouping, "Other"),
#          grouping_abbr = abbreviations[grouping_new])
# 
# # Aggregate the 'Other' category without summing NA values
# misc_df_agg <- misc_df %>%
#   group_by(year, grouping_abbr) %>%
#   summarise(value = ifelse(all(is.na(value)), NA, sum(value, na.rm = TRUE)), .groups = 'drop')
# 
# # Filter data frame to include only the first and last rows for each group for labeling
# misc_df_first_last <- misc_df_agg %>%
#   group_by(grouping_abbr) %>%
#   filter(row_number() == 1 | row_number() == n())
# 
# # Create a multi-line chart with the new grouping
# plot_E <- ggplot(misc_df_agg, aes(x = year, y = value, group = grouping_abbr, color = grouping_abbr)) +
#   geom_line(na.rm = TRUE) +
#   geom_point(na.rm = TRUE) +
#   scale_y_continuous(labels = scales::percent_format(scale = 1, accuracy = 1),
#                      limits = c(0, 40),
#                      breaks = seq(0, 40, 5)) +
#   geom_label_repel(data = misc_df_first_last,
#                    mapping = aes(label = glue("{grouping_abbr}: {scales::percent(value/100, accuracy = 1)}")),
#                    nudge_y = 2,
#                    # arrow = arrow(length = unit(0.03, "npc")),
#                    na.rm = TRUE) +
#   labs(x = "Year",
#        y = "Percent of Student Body",
#        title = "Changes in Other TEA Categories",
#        subtitle = "1995 - 2022",
#        caption = caption
#        ) +
#   scale_color_manual(values = brewer.pal(n = 5, name = "Dark2")) +
#   theme_minimal(base_size = 16) +
#   theme(legend.position = "none",
#         plot.title.position = "plot",
#         text = element_text(color = "royalblue"), # family = "Roboto"),
#         plot.title = element_text(color = "darkgreen",
#                                   size = rel(1.25),
#                                   face = "bold",
#                                   # family = "Roboto",
#                                   lineheight = 0.7,
#                                   margin = margin(0.5, 0, 0.5, 0, "lines")),
#         plot.subtitle = element_text(color = "darkgreen",
#                                      size = rel(1.1),
#                                      face = "bold",
#                                      lineheight = 0.7,
#                                      margin = margin(0, 0, 1, 0, "lines")
#                                      ),
#         plot.caption = element_text(color = "darkgreen",
#                                     size = rel(0.9),
#                                     face = "bold",
#                                     lineheight = 1.0,
#                                     margin = margin(1.0, 0, 0.5, 0, "lines"
#                                                     )
#                                     ),
#         strip.text = element_text(# family = "Roboto",
#                                   color = "orange",
#                                   size = rel(1.1),
#                                   face = "bold",
#                                   margin = margin(2, 0, 0.5, 0, "lines")),
#         axis.text = element_text(color = "black"),
#         panel.background = element_rect(fill = "white", color = NA),
#         plot.background = element_rect(fill = "white", color = NA),
#         panel.grid = element_blank()
#     )
# 
# 
# # Print the plot
# print(plot_E)
# 
# # Stop recording
# gg_stop_recording()



```

