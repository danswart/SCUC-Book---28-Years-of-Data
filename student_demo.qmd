---
title: "Changes in Composition"
author: "Dan Swart, Trustee, Seat 6"
editor: 
  markdown: 
    wrap: 72
---


<br>
<br>
<br>

Let your eyes wander over these plots and get a sense of the growth and
development of the district over the last 28 years. Using just your eyes
you will gain an appreciation for the accomplishments and growth of the
district.

<br>
<br>
<br>

Enjoy!

<br>
\clearpage



```{r, echo=FALSE, eval=knitr::is_html_output(), results='asis'}

#####  USE THIS CODE TO UPDATE THE RUNNING BAR CHART AND CREATE AN MP4 WITH LARGER TITLES


# library(tidyverse)
# library(gganimate)
# library(ggtext)
# library(paletteer)
# library(ggrepel)
# library(plotly)
# library(readr)
# library(av)
# library(ggplot2)
# library(ggtext)
# 
# # Read in data
#  snapshots <- read_csv(file = here::here("data",
#                                    "SCUC Snapshots 1995 to 2022-LONG.csv")
#                  )
# 
# 
#   # Start a pipeline with the input data from the TEA Snapshots
#   snapshots_formatted <- snapshots %>%
#     filter(section == "Students") %>%
#     filter(
#       grouping %in% c(
#         "White",
#         "African American",
#         "Hispanic",
#         "Asian",
#         "American Indian",
#         "Pacific Islander",
#         "2 or More Races"
#       )
#     ) %>%
#     group_by(year) %>%
#     mutate(rank = dense_rank(-value)) %>%
#     mutate(value_lbl = paste0(" ",
#                               round(value),
#                               "%")
#            ) %>%
#     ungroup() %>%
# 
#     # Replace NAs with zeros
#     mutate(value = replace_na(value, 0))
# 
#   # Filter out grouping categories with values <= 0
#   snapshots_filtered <- snapshots_formatted %>%
#     group_by(grouping) %>%
#     filter(sum(value) > 0) %>%
#     ungroup()
# 
#  # Create plot with ggplot2
# student_body <- ggplot(snapshots_filtered,
#                        aes(
#                          rank,
#                          group = grouping,
#                          fill = as.factor(grouping),
#                          color = as.factor(grouping)
#                        )
# ) +
#   geom_tile(aes(
#     y = value / 2,
#     height = value,
#     width = 0.9
#   ),
#   alpha = 0.8,
#   color = NA) +
#   geom_text(
#     aes(y = 0, label = paste(grouping, " ")
#         ),
#     size = 8,
#     fontface = "bold",
#     vjust = 0.2,
#     hjust = 1,
#     color = "black"
#   ) +
#   geom_text(
#     aes(y = value,
#         label = value_lbl,
#         hjust = 0
#     ),
#     size = 8,
#     fontface = "bold",
#     color = "black"
#   ) +
#   coord_flip(clip = "off") +
#   scale_y_continuous(
#     labels = scales::comma,
#     expand = c(0, 0),
#     limits = c(0, NA)
#   ) +
# 
#   # Ensure bars start at the bottom of the plot
#   scale_x_reverse() +
#   guides(color = "none") +
#   theme(
#     axis.line = element_blank(),
#     axis.text.x = element_text(size = 12,
#                                hjust = 1
#     ),
#     axis.text.y = element_blank(),
#     axis.ticks = element_blank(),
#     axis.ticks.x = element_blank(),
#     axis.title.x = element_blank(),
#     axis.title.y = element_blank(),
#     legend.position = "none",
#     panel.background = element_blank(),
#     panel.border = element_blank(),
#     panel.grid.major = element_blank(),
#     panel.grid.minor = element_blank(),
#     panel.grid.major.x = element_line(linewidth = .1,
#                                       color = "black"
#     ),
#     panel.grid.minor.x = element_line(linewidth = .1,
#                                       color = "black"
#     ),
#     plot.title = element_markdown(
#       size = 24,
#       hjust = 0.5,
#       face = "bold",
#       colour = "black",
#       vjust = -1
#     ),
#     plot.subtitle = element_text(
#       size = 20,
#       hjust = 0.5,
#       face = "italic",
#       color = "black"
#     ),
#     plot.caption = element_text(
#       size = 18,
#       hjust = 0.5,
#       face = "italic",
#       color = "black"
#     ),  # Control caption size
#     plot.background = element_blank(),
#     plot.margin = margin(2, # top
#                          2, # right
#                          2, # bottom
#                          8, # left
#                          "cm"
#     )
#   ) +
#   transition_states(
#     year,
#     transition_length = 5,
#     state_length = 21,
#     wrap = FALSE
#   ) +
#   view_follow(fixed_x = TRUE)  +
#   labs(title = '<span style="font-size: 24px;">Proportions by Year: <span style="font-size: 36px; color: darkgreen; font-weight: bold;">{closest_state}</span></span>',
#        subtitle  =  "Composition of Student Body by Ethnicity",
#        caption  = ""
#   ) +
#   scale_fill_manual(values = paletteer_d("awtools::bpalette")
#   )
# 
# # print(student_body)
# 
# 
# # animate(student_body,
# #         nframes = 300,
# #         fps = 30,
# #         duration = 28,
# #         end_pause = 400,
# #         width = 2400,
# #         height = 1600,
# #         rewind = FALSE)
# # 
# # 
# #  # Save AS GIF with three loops
# # anim_save("student-composition-racing-bar.gif",
# #   animation = student_body,
# #   path = "gif",
# #   nframes = 300,
# #   fps = 30,
# #   duration = 28,
# #   end_pause = 400,
# #   width = 1200,
# #   height = 800,
# #   rewind = FALSE,
# #   renderer = gifski_renderer(),
# #   res = 96,
# #   theme = theme(labs
# #                 (title = '<span style="font-size: 24px;">Proportions by Year: <span style="font-size: 36px; color: darkgreen; font-weight: bold;">{closest_state}</span></span>',
# #                   subtitle  =  "Composition of Student Body by Ethnicity"
# #                   )
# #                 )
# # )
# 
# # Save AS MP4
# anim_save("student-composition-racing-bar.mp4",
#   animation = student_body,
#   path = "gif",
#   nframes = 300,
#   fps = 30,
#   duration = 28,
#   end_pause = 400,
#   width = 1200,
#   height = 800,
#   rewind = FALSE,
#   renderer = ffmpeg_renderer(),
#   res = 96,
#   theme = theme(labs
#                 (title = '<span style="font-size: 24px;">Proportions by Year: <span style="font-size: 36px; color: darkgreen; font-weight: bold;">{closest_state}</span></span>',
#                   subtitle  =  "Composition of Student Body by Ethnicity"
#                   )
#                 )
#   )


#####  USE THIS VERSION OF A RUNNING BAR CHART TO CREATE AN MP4 WITH LARGER TITLES

```





```{r, echo=FALSE, eval=knitr::is_html_output(), animation.hook=if (knitr::is_html_output()) 'ffmpeg'}

knitr::include_graphics("gif/student-composition-racing-bar.mp4")

```




**Comment:**  For those who prefer static charts
<br>
<br>
<br>

\vspace{1.0in}


![](recording/student-demo-ethnic-2024_05_29_13_05_13.125282.png)


\clearpage

**Comment:**
<br>
<br>
<br>

\vspace{1.0in}



![](recording/student-demo-other-cats-2024_05_29_13_14_50.332520.png)



<!-- CONSIDER PREPARING THEM AS PLOT_LY PLOTS TO SEE IF THAT WORKS BETTER! -->


```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=7, fig.height=6}

#####  NOT SURE YOU CANNOT USE GGREPEL AND GGTEXT AT THE SAME TIME!!!

#####  GENERATE PLOT WITH THIS CODE, DISPLAY THE PDF ABOVE

#####  COMMENT THIS SECTION OUT WHEN PDF FILE IN PLACE ABOVE


# Load libraries

# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# library(RColorBrewer)
# library(forcats)
# library(showtext)
# library(camcorder)
# 
# options(scipen = 999)
# 
# # Load fonts
# 
# # font_add_google("Yanone Kaffeesatz",
# #                 "yanone")
# # showtext.auto()
# 
# # Start recording
# gg_record(
#   dir = "recording",
#   device = "pdf",
#   width = 8,
#   height = 7,
#   units = "in",
#   dpi = 300
# )
# 
# # Load the data
# df2 <- read_csv(file = here::here("data", "SCUC Snapshots 1995 to 2022-LONG.csv"))
# 
# # Specify the desired section
# desired_section <- "Students"
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# 
# # Filter data frame to include only those rows specified by section
# e_df <- df2 %>%
#   filter(section == desired_section & str_detect(sort, "^E[1-7]$")) %>%
#   arrange(sort)
# 
# # Replace zeros in the value column with NA
# e_df$value <- ifelse(e_df$value == 0, NA, e_df$value)
# 
# # Define the main categories and the "Other" categories
# main_categories <- c("White", "Hispanic", "African American")
# other_categories <- setdiff(unique(e_df$grouping), main_categories)
# 
# # Create a new 'grouping' column
# e_df <- e_df %>%
#   mutate(grouping_new = ifelse(grouping %in% main_categories, grouping, "Other"))
# 
# # Aggregate the 'Other' category
# e_df_agg <- e_df %>%
#   group_by(year, grouping_new) %>%
#   summarise(value = sum(value, na.rm = TRUE), .groups = 'drop')
# 
# # Filter data frame to include only the first and last rows for each group for labeling
# e_df_first_last <- e_df_agg %>%
#   group_by(grouping_new) %>%
#   filter(row_number() == 1 | row_number() == n())
# 
# # Create a multi-line chart with the new grouping
# plot_E <- ggplot(e_df_agg, aes(x = year, y = value, group = grouping_new, color = grouping_new)) +
#   geom_line(na.rm = TRUE) +
#   geom_point(na.rm = TRUE) +
#   scale_y_continuous(labels = scales::percent_format(scale = 1, accuracy = 1),
#                      limits = c(0, 80),
#                      breaks = seq(0, 80, 10)) +
#   geom_label_repel(data = e_df_first_last,
#                    mapping = aes(label = glue("{grouping_new}: {scales::percent(value/100, accuracy = 1)}")),
#                    nudge_y = 2,
#                    # arrow = arrow(length = unit(0.03, "npc")),
#                    na.rm = TRUE) +
#   labs(x = "Year",
#        y = "Percent of Student Body",
#        title = "Changes in Ethnic Makeup of \nStudents Over Time",
#        subtitle = "1995 - 2022",
#        caption = caption
#        ) +
# 
#   # Adjust the number of colors for the new groups
#   scale_color_manual(values = brewer.pal(n = 5,
#                                          name = "Dark2"
#                                          )
#                      ) +
#   theme_minimal(base_size = 16) +
#   theme(legend.position = "none") +
#   theme(plot.title.position = "plot",
#     text = element_text(color = "royalblue",
#                             # family = "Roboto"
#                             ),
#         plot.title = element_text(color = "darkgreen",
#                                                     size = rel(1.25),
#                                                     face = "bold",
#                                                     # family = "Roboto",
#                                                     lineheight = 1.0,
#                                                     margin = margin(0.5, 0, 0.5, 0, "lines"
#                                                                     )
#                                                     ),
#         plot.subtitle = element_text(color = "darkgreen",
#                                      size = rel(1.10),
#                                      face = "bold",
#                                      lineheight = 0.7,
#                                      margin = margin(0, 0, 0.5, 0, "lines"
#                                                      )
#                                      ),
#         plot.caption = element_text(color = "darkgreen",
#                                     size = rel(1.0),
#                                     face = "bold",
#                                     # family = "Roboto",
#                                     lineheight = 1.0,
#                                     margin = margin(0.5, 0, 0.5, 0, "lines"
#                                                     )
#                                     ),
#         strip.text = element_text(# family = "Roboto",
#                                   color = "orange",
#                                   size = rel(1.1),
#                                   face = "bold",
#                                   margin = margin(2, 0, 0.5, 0, "lines"
#                                                   )
#                                   ),
#         axis.text = element_text(color = "black"
#                                  ),
#         panel.background = element_rect(fill = "white", color = NA),
#         plot.background = element_rect(fill = "white", color = NA)
#     )
# 
# 
# # Print the plot
# print(plot_E)
# 
# # Stop recording
# gg_stop_recording()


```




```{r echo=FALSE, warning=FALSE, message=FALSE, fig.width=8, fig.height=7}

#####  YOU CANNOT USE GGREPEL AND GGTEXT AT THE SAME TIME!!!

# Load libraries

# library(tidyverse)
# library(qicharts2)
# library(haven)
# library(readxl)
# library(skimr)
# library(visdat)
# library(gghighlight)
# library(dplyr)
# library(stringr)
# library(ggtext)
# library(gganimate)
# library(ggplot2)
# library(purrr)
# library(scales)
# library(ggrepel)
# library(glue)
# library(plotly)
# library(htmlwidgets)
# library(readr)
# library(RColorBrewer)
# library(forcats)
# library(showtext)
# library(camcorder)
# 
# options(scipen = 999)
# 
# # Load fonts
# 
# # font_add_google("Cabin",
# #                "Cabin")
# # showtext.auto()
# 
# # Start recording
# gg_record(
#   dir = "recording",
#   device = "pdf",
#   width = 8,
#   height = 7,
#   units = "in",
#   dpi = 300
# )
# 
# 
# # Load the data
# df2 <- read_csv(file = here::here("data", "SCUC Snapshots 1995 to 2022-LONG.csv"))
# 
# # Specify the desired section
# desired_section <- "Students"
# 
# # Specify the caption for the plots
# caption <- c("\n Source:  https://tea.texas.gov/reports-and-data")
# 
# # Filter data frame to include only those rows specified by section
# misc_df <- df2 %>%
#   filter(section == desired_section & str_detect(sort, "^MISC[1-6]$"))
# 
# # Replace zeros in the value column with NA
# misc_df$value <- ifelse(misc_df$value == 0, NA, misc_df$value)
# 
# # Define the main categories and the "Other" categories
# main_categories <- c("Economically Disadvantaged", "Career and Technology Ed", "Special Education", "Gifted and Talented Ed")
# other_categories <- setdiff(unique(misc_df$grouping), main_categories)
# 
# # Create a mapping between original descriptions and abbreviations
# abbreviations <- c(
#   "Economically Disadvantaged" = "Econ Disadv",
#   "Career and Technology Ed" = "CTE",
#   "Special Education" = "SPED",
#   "Gifted and Talented Ed" = "Gifted",
#   "Other" = "Other"
# )
# 
# # Create a new 'grouping' column with abbreviations
# misc_df <- misc_df %>%
#   mutate(grouping_new = ifelse(grouping %in% main_categories, grouping, "Other"),
#          grouping_abbr = abbreviations[grouping_new])
# 
# # Aggregate the 'Other' category without summing NA values
# misc_df_agg <- misc_df %>%
#   group_by(year, grouping_abbr) %>%
#   summarise(value = ifelse(all(is.na(value)), NA, sum(value, na.rm = TRUE)), .groups = 'drop')
# 
# # Filter data frame to include only the first and last rows for each group for labeling
# misc_df_first_last <- misc_df_agg %>%
#   group_by(grouping_abbr) %>%
#   filter(row_number() == 1 | row_number() == n())
# 
# # Create a multi-line chart with the new grouping
# plot_E <- ggplot(misc_df_agg, aes(x = year, y = value, group = grouping_abbr, color = grouping_abbr)) +
#   geom_line(na.rm = TRUE) +
#   geom_point(na.rm = TRUE) +
#   scale_y_continuous(labels = scales::percent_format(scale = 1, accuracy = 1),
#                      limits = c(0, 40),
#                      breaks = seq(0, 40, 5)) +
#   geom_label_repel(data = misc_df_first_last,
#                    mapping = aes(label = glue("{grouping_abbr}: {scales::percent(value/100, accuracy = 1)}")),
#                    nudge_y = 2,
#                    # arrow = arrow(length = unit(0.03, "npc")),
#                    na.rm = TRUE) +
#   labs(x = "Year",
#        y = "Percent of Student Body",
#        title = "Changes in Other TEA Categories",
#        subtitle = "1995 - 2022",
#        caption = caption
#        ) +
#   scale_color_manual(values = brewer.pal(n = 5, name = "Dark2")) +
#   theme_minimal(base_size = 16) +
#   theme(legend.position = "none",
#         plot.title.position = "plot",
#         text = element_text(color = "royalblue"), # family = "Roboto"),
#         plot.title = element_text(color = "darkgreen",
#                                   size = rel(1.25),
#                                   face = "bold",
#                                   # family = "Roboto",
#                                   lineheight = 0.7,
#                                   margin = margin(0.5, 0, 0.5, 0, "lines")),
#         plot.subtitle = element_text(color = "darkgreen",
#                                      size = rel(1.1),
#                                      face = "bold",
#                                      lineheight = 0.7,
#                                      margin = margin(0, 0, 1, 0, "lines")
#                                      ),
#         plot.caption = element_text(color = "darkgreen",
#                                     size = rel(0.9),
#                                     face = "bold",
#                                     lineheight = 1.0,
#                                     margin = margin(1.0, 0, 0.5, 0, "lines"
#                                                     )
#                                     ),
#         strip.text = element_text(# family = "Roboto",
#                                   color = "orange",
#                                   size = rel(1.1),
#                                   face = "bold",
#                                   margin = margin(2, 0, 0.5, 0, "lines")),
#         axis.text = element_text(color = "black"),
#         panel.background = element_rect(fill = "white", color = NA),
#         plot.background = element_rect(fill = "white", color = NA),
#         panel.grid = element_blank()
#     )
# 
# 
# # Print the plot
# print(plot_E)
# 
# # Stop recording
# gg_stop_recording()



```

